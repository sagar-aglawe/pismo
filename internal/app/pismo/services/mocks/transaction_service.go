// Code generated by mockery v2.42.1. DO NOT EDIT.

package service_mocks

import (
	dto "self-projects/pismo/internal/app/pismo/dto"

	mock "github.com/stretchr/testify/mock"

	request_context "self-projects/pismo/pkg/request_context"
)

// ITransactionService is an autogenerated mock type for the ITransactionService type
type ITransactionService struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: rCtx, reqBody
func (_m *ITransactionService) CreateTransaction(rCtx *request_context.ReqCtx, reqBody *dto.TransactionCreateRequest) (*dto.TransactionCreateResponse, error) {
	ret := _m.Called(rCtx, reqBody)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *dto.TransactionCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request_context.ReqCtx, *dto.TransactionCreateRequest) (*dto.TransactionCreateResponse, error)); ok {
		return rf(rCtx, reqBody)
	}
	if rf, ok := ret.Get(0).(func(*request_context.ReqCtx, *dto.TransactionCreateRequest) *dto.TransactionCreateResponse); ok {
		r0 = rf(rCtx, reqBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TransactionCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request_context.ReqCtx, *dto.TransactionCreateRequest) error); ok {
		r1 = rf(rCtx, reqBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITransactionService creates a new instance of ITransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransactionService {
	mock := &ITransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
